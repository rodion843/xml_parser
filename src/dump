std::vector<tag> vt;
std::set<std::string> tags;
auto whatInside(auto &ss)
{
  //std::stringstream ss{str};
  std::string buffer(1024 * 1, '\0');
  while(ss.get(&buffer.front(), buffer.size(), '>'))
  {
    printf("%s\n", buffer.c_str());
    buffer.erase(0, buffer.find('<'));
    auto pos = buffer.find(' ');
    if (pos != std::string::npos)
    {
      printf("%s\n", buffer.c_str());
      tags.insert(buffer.substr(1, pos));
    }
    else
    {
      printf("%s\n", buffer.c_str());
      tags.insert(buffer.substr(1, buffer.size()));
    }
    //std::cout << buffer << '\n';
    ss.ignore(1);
  }

}
auto parseHeader(auto &ss)
{
  char dump[100];
  ss.getline(dump, 100, '\"');

  char version[10];
  ss.getline(version, 10, '\"');

  ss.getline(dump, 100, '\"');
  char encoding[10] {"empty"};
  ss.getline(encoding, 10, '\"');

  ss.getline(dump, 100, '\"');
  char standalone[10];
  ss.getline(standalone, 10, '\"');

  return xml_header {
    {version}, 
    {encoding}, 
    std::string{standalone} == std::string{"yes"}};
}
void printTags(auto &fs, 
               std::string &str, 
               bool firstTime = true)
{
  std::string buffer{str};
  auto pos = 0ul;
  if (!firstTime)
  {
    buffer.resize(str.size() * 2);
    pos = str.size();
  }
  while(fs.read(&buffer[pos], buffer.size()))
  {
    std::cout << "buffer size :" << buffer.size() << '\n' 
              << buffer << '\n';
    if(buffer.end() != std::find(buffer.begin(), 
               buffer.end(), '<'))
    {
      std::cout << "going in\n";
      printTags(fs, buffer, false);
      std::cout << "going out\n";
    }
  }
}

